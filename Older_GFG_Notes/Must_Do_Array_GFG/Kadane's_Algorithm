/*
Given an array arr of N integers. Find the contiguous sub-array with maximum sum.

Input:
The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the size of array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array.

Output:
Print the maximum sum of the contiguous sub-array in a separate line for each test case.

Constraints:
1 ≤ T ≤ 110
1 ≤ N ≤ 106
-107 ≤ A[i] <= 107

Example:
Input
2
5
1 2 3 -2 5
4
-1 -2 -3 -4
Output
9
-1

Problem Editorial - https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/
*/

// Code for above problem
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int main()
 {
	long long t;
	cin>>t;
	while(t--)
	{
	 long long int n,x,max_here=0,minsum=INT_MIN,max_so_far=INT_MIN;
	 cin>>n;

	 vector<long long> arr;
     bool flag=false;
	 for(int j=0;j<n;j++)
	 {
	     cin>>x;
	     arr.push_back(x);
	     if(x>minsum)
	     minsum=x;
	     if(x>0)
	     flag=true;
	 }
	for(long long j=0;j<n;j++)
	{
	    max_here+=arr[j];
	    if(max_here<0)
	        max_here=0;
	    if(max_so_far<max_here)
	       max_so_far=max_here;
	}
	if(!flag)
	cout<<minsum<<"\n";
	else
	cout<<max_so_far<<"\n";
	
	}
	return 0;
}
